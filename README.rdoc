== README
This README documents describes the purpose of the software and describes whatever steps are necessary to get the Ruby based Provisioning Portal up and running.

=== Purpose
This ProvisioningEngine / ProvisioningPortal is a Proof of Concept that shows how to manage target systems (in our case VoIP & UC servers) and help administrators to provision Customers, Sites and Users on the target systems.

Check out a running example on https://salty-peak-4964.herokuapp.com/customers (is running in simulated, synchronous mode).

In real live, the ProvisioningEngine uses background jobs to perform the provisioning tasks on VoIP and UC systems. The background jobs are managed from the "Provisioning Tasks" tab. An Apache Camel based connector is used as connector module for to 
* manage configuration templates (SSH scripts, mass import files)
* perform scripted remote imports
* access target system using SOAP/XML and SPML interfaces for reading, verifying and altering the configuration of the target systems.

=== Installation
==== Installation on your own machine (Windows or Linux)
* prerequisites:
  * rails v4 is installed
  * ruby v2 is installed
  * in simulation mode (default), the ProvisioningEngine can run standalone. In production, the Apache Camel based ProvisioningEngine (private SW) is needed as connector.
* download:
  * git clone https://github.com/oveits/ProvisioningEngine/tree/simulation_improvements ProvisioningPortal
* cd ProvisioningPortal
* rake db:migrate
* optional: change configuration for asynchronous mode:
  * cd config
  * cp application.yml.example application.yml # if not done already
  * edit application.yml
    * adapt PROVISIONINGENGINE_CAMEL_URL to point to you Apache Camel ProvisioningEngine adapter (not part of this SW)
  * restart the web server after each change (e.g. (base dir)/stopWebPortal.sh and (base dir)/startWebPortal.sh on Linux)
* optional: change configuration for non-simulated mode:
  * cd config
  * cp application.yml.example application.yml # if not done already
  * edit application.yml:
    * WEBPORTAL_ASYNC_MODE: "true"
  
==== Installation on Nitrous.IO
* on www.nitrous.io, create a box with minimum requirements
* open IDE
* in the console:
  * cd workspace
  * git clone https://github.com/oveits/ProvisioningEngine ProvisioningEngine 
  * cd ProvisioningEngine
  * git status
  * git checkout -b nitrous
  * rake db:migrate RAILS_ENV=development
  * rails s &
  * cp config/application.yml.example config/application.yml
    * edit the file config/application.yml according to your needs
  * start Web Server, see below
  * commit changes to git:
    * first time use:
      * git config --global user.email "you@example.com"
      * git config --global user.name "Your Name"
    * git add .
    * git commit -am "description of the change"
* menu -> Preview -> Port 3000 

===  Start Web server
* start web server on Windows on port 80:
  * cd ProvisioningPortal # the root of the SW, as downloaded via git clone above
  * rails s -p 80   --- or as daemon: rails s -d -p 80 (works also on nitrous.io, if you omit the -p 80, so port 3000 is used)
  * rake jobs:work # for starting the background processes (based on the "delayed_job_active_record" gem)
  * or run delayed_jobs as daemon:
    * first time install:
      * add gem "daemon" to Gemfile
      * bundle install
      * rails generate delayed_job
    * then start/stop daemon by: bin/delayed_job start/stop (works also on nitrous.io)
* start web server on Linux on port 80:
  * cd ProvisioningPortal # the root of the SW, as downloaded via git clone above
  * ./start # will start both, the web server and the delayed_jobs in the background and will append the logs to /var/log/WebPortal.log
* open a browser and connect to URL = http://localhost/ 
  expected result: redirection to http://localhost/customers, showing a list of configured customers (expected to be empty at this point).

=== Test Execution
* rake db:migrate RAILS_ENV=test
* bundle exec spork # for speeding up rspec test initialization
* start single test (--drb needed for spork speedup), e.g.: 
  * bundle exec rspec --drb spec/requests/provisioningobjects_spec.rb -e "with valid information should create a provisioning task with action"
* start all tests:
  * bundle exec rspec --drb spec/requests/provisioningobjects_spec.rb

=== Commit & Production
* if behind proxy (e.g.: 172.28.12.5:8080):
  * SET HTTP_PROXY=http://172.28.12.5:8080
* cd /d F:\veits\RubyOnRails\ProvisioningPortalvx.x.x
* git add .
* git status
* bundle exec rake assets:precompile # needed in production and/or heroku, if assets like css have changed.
* git push
* heroku
  # if not done already in this folder:
    * heroku create 
  # else, after each acommand the option 
    * heroku <command> --app <app found via 'heroku apps'> is needed in the subsequent lines
  * git push heroku # or
  * git push heroku yourbranch:master #, if you are not on the master branch
  * heroku apps
  * heroku run rake db:migrate --app <app found above> (e.g. heroku run rake db:migrate --app salty-peak-4964)
* heroku run rake jobs:work # this will block the CMD/terminal window, so for the next command, you will need a new CMD/terminal window:
* heroku open # this will open a browser with the correct link

* synchronize local git with remote git repository:
  * git pull
  
=== Tipps
* Pre-view this rdoc: 
  1. rdoc README.rdoc -o ./tmp/doc
  2. open (application root)/tmp/doc/README_rdoc.html in a browser 
  
* NginX
  * sudo apt-get update
  * sudo apt-get install nginx
  * cd /etc/nginx
  * sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/cert.key -out /etc/nginx/cert.pem
  * change config: sudo vi /etc/nginx/sites-enabled/default
  * observe error logs: sudo tail -F /var/log/nginx/error.log
  * in other terminal: sudo service nginx start

