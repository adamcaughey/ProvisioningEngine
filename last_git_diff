diff --git a/Gemfile b/Gemfile
index e5efcd4..5c6f8a3 100644
--- a/Gemfile
+++ b/Gemfile
@@ -106,3 +106,8 @@ gem 'figaro'
 #gem 'respond-js-rails'
 # may be better? See https://github.com/gevans/respond-rails:
 gem "respond-rails", "~> 1.0"
+
+# OV for automatic creation of UML-like class diagrams (see http://rails-erd.rubyforge.org/)
+group :development do
+  gem "rails-erd"
+end
diff --git a/Gemfile.lock b/Gemfile.lock
index bd6d939..2dc22bd 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -46,6 +46,7 @@ GEM
       timers (~> 4.0.0)
     childprocess (0.5.3)
       ffi (~> 1.0, >= 1.0.11)
+    choice (0.1.7)
     coderay (1.1.0)
     coffee-rails (4.0.1)
       coffee-script (>= 2.2.0)
@@ -158,6 +159,11 @@ GEM
       bundler (>= 1.3.0, < 2.0)
       railties (= 4.1.4)
       sprockets-rails (~> 2.0)
+    rails-erd (1.3.1)
+      activerecord (>= 3.2)
+      activesupport (>= 3.2)
+      choice (~> 0.1.6)
+      ruby-graphviz (~> 1.0.4)
     rails_12factor (0.0.2)
       rails_serve_static_assets
       rails_stdout_logging
@@ -187,6 +193,7 @@ GEM
       rspec-core (~> 2.13.0)
       rspec-expectations (~> 2.13.0)
       rspec-mocks (~> 2.13.0)
+    ruby-graphviz (1.0.9)
     rubyzip (0.9.9)
     sass (3.2.19)
     sass-rails (4.0.3)
@@ -272,6 +279,7 @@ DEPENDENCIES
   minitest
   pg (= 0.15.1)
   rails (= 4.1.4)
+  rails-erd
   rails_12factor (= 0.0.2)
   respond-rails (~> 1.0)
   rspec-rails (= 2.13.1)
diff --git a/README.rdoc b/README.rdoc
index b0fd6f3..75d6e20 100644
--- a/README.rdoc
+++ b/README.rdoc
@@ -71,6 +71,9 @@ This README documents whatever steps are necessary to get the Ruby based Provisi
 * cd /d F:\veits\RubyOnRails\ProvisioningPortalvx.x.x
 * git add .
 * git status
+* bundle exec rake assets:precompile # needed if assets like css have changed. If this is not done, e.g. heroku will still have the old css files
+  * might be needed only, since I had set 'config.assets.compile = false' in config/environments/production.rb. 
+  * Next time you can try to set it to true and to omit the 'rake assets:precompile' command. You will need to change something in the css file to see the effect...
 * git commit -a -m "minor change: / is now redirected to /customers"
 * git push
 * heroku
diff --git a/app/controllers/customers_controller.rb b/app/controllers/customers_controller.rb
index 7a23fc3..1207971 100644
--- a/app/controllers/customers_controller.rb
+++ b/app/controllers/customers_controller.rb
@@ -4,10 +4,7 @@ class CustomersController < ApplicationController
   # GET /customers
   # GET /customers.json
   def index
-    #@customers = Customer.all
-    # hide dummy customer used for syncing:
-    #@customers = Customer.where.not(name: "_sync_dummyCustomer_________________")
-    @customers = Customer.where.not("name LIKE ?", "_sync_dummyCustomer_________________%")
+    @customers = Customer.all
   end
 
   # GET /customers/1
@@ -193,18 +190,22 @@ class CustomersController < ApplicationController
 	#abort params[:id].inspect
     if params[:id].nil?
       # PATCH       /customers/synchronize
-      async = true # SEVERE BUG: if async = true, the Web Portal process is totally lost and can only be killed with kill -9
-      recursive = false
-
-           # for test:
-           Customer.where(name: 'OllisTestCustomer').last.destroy unless Customer.where(name: 'OllisTestCustomer').count == 0
-           Customer.where(name: 'OllisTestCustomer2').last.destroy unless Customer.where(name: 'OllisTestCustomer2').count == 0
-           
-           # cleanup (for test only; cannot be done later, since another sync process might be in need of the dummy customer):
-           Customer.where('name LIKE ?', "_sync_dummyCustomer_________________%").each do |element|
-             element.destroy
-           end
+      recursive = false # recursive not yet supported
+ 
+#           # for test:
+#           Customer.where(name: 'OllisTestCustomer').last.destroy unless Customer.where(name: 'OllisTestCustomer').count == 0
+#           Customer.where(name: 'OllisTestCustomer2').last.destroy unless Customer.where(name: 'OllisTestCustomer2').count == 0
+#           
+#           # cleanup (for test only; cannot be done later, since another sync process might be in need of the dummy customer):
+#           Customer.where('name LIKE ?', "_sync_dummyCustomer_________________%").each do |element|
+#             element.destroy
+#           end
       
+      Customer.synchronizeAll
+      redirect_to :back, notice: "All Customers are being synchronized."
+
+if false
+
            #      # test via targets:
            #      targets=Target.where(name: 'CSL9DEV')
            #      updateDB = UpdateDB.new
@@ -239,6 +240,7 @@ class CustomersController < ApplicationController
 #      responseBody = updateDB.perform(dummyCustomer)
 
       redirect_to :back, notice: "All #{dummyCustomer.class.name.pluralize} are being synchronized."
+end
     else
       # PATCH       /customers/1/synchronize
       async = true
@@ -251,9 +253,10 @@ class CustomersController < ApplicationController
 
   # PATCH	/customers/1/provision
   def provision
+    async = true
     @object = Customer.find(params[:id])
     respond_to do |format|
-      if @object.provision(:create)
+      if @object.provision(:create, async)
         format.html { redirect_to :back, notice: "#{@object.class.name} #{@object.name} is being provisioned to target system(s)" }
         format.json { render :show, status: :ok, location: @object }
       else
diff --git a/app/models/customer.rb b/app/models/customer.rb
index c7e92b9..65ca277 100644
--- a/app/models/customer.rb
+++ b/app/models/customer.rb
@@ -76,6 +76,10 @@ class Customer < Provisioningobject #< ActiveRecord::Base
     Site
   end
   
+  def self.provisioningAction(method)
+     "action=List Customers"
+  end
+  
   def provisioningAction(method)
    
     case method
@@ -87,12 +91,76 @@ class Customer < Provisioningobject #< ActiveRecord::Base
         end
         "action=Delete Customer, customerName=#{name}"
       when :read
-        "action=List Customers"
+	#"action=List Customers"
+        "action=List Customers, customerName=#{name}"
       else
         abort "Unsupported provisioning method"
     end
   end
 
+  def self.synchronizeAll(targets = nil, async=true, recursive=false)
+
+recursive = false
+#targets = Target.where('name LIKE ?', 'CSL9DEV%')
+    targets ||= Target.all
+    if async || recursive
+      returnBody = delay.synchronizeAllSynchronously(targets, recursive)
+      #abort "synchronizeAll with async=true and recursive=true is work in progress"
+    else
+        returnBody = synchronizeAllSynchronously(targets, recursive)
+    end
+  end
+
+  def self.synchronizeAllSynchronously(targets, recursive=false)
+    targets.each do |mytarget|
+		#abort mytarget.inspect
+      #responseBody = Customer::provision(:read, false, Customer, mytarget)
+      responseBody = Customer.read(mytarget)
+
+		#abort responseBody
+      # error handling:
+      abort "synchronizeAllSynchronously(: ERROR: provisioningRequest timeout reached!" if responseBody.nil?
+
+      # depending on the result, targetobject.provision can return a Fixnum. We need to convert this to a String
+      responseBody = "synchronizeAllSynchronously: ERROR: #{self.class.name} does not exist" if responseBody.is_a?(Fixnum) && responseBody == 101
+
+      # abort, if it is still a Fixnum:
+      abort "synchronizeAllSynchronously: ERROR: wrong responseBody type (#{responseBody.class.name}) instead of String)" unless responseBody.is_a?(String)
+      # business logic error:
+      abort "received an ERROR response for provision(:read) in synchronizeAllSynchronously" unless responseBody[/ERROR.*$/].nil?
+    
+      require 'rexml/document'
+      xml_data = responseBody
+      doc = REXML::Document.new(xml_data)
+      
+		#abort doc.root.elements["GetBGListData"].elements.inspect
+      doc.root.elements["GetBGListData"].elements.each do |element|
+		#abort element.text.inspect
+        # skip special customer (BG) named BG_DC
+        next if /\ABG_DC\Z/.match( element.text )
+        # skip if the customer exists already in the database:
+		#abort xml_data.inspect
+		#abort element.text.inspect
+        #next if Customer.where(name: element.text).count > 0
+        next if Customer.where(name: element.text, target_id: mytarget.id).count > 0
+		#abort element.text
+  
+        # found an object that is not in the DB:
+        newCustomer = Customer.new(name: element.text, target_id: mytarget.id, status: 'provisioning successful (verified existence)')
+  
+        # today, it is not possible to read the language etc from Camel PE, so we cannot save with validations.
+        # save it with no validations. 
+        newCustomer.save!(validate: false)
+      
+		#abort newCustomer.inspect
+  
+	p 'SSSSSSSSSSSSSSSSSSSSSSSSS    Customer.synchronizeAll responseBody    SSSSSSSSSSSSSSSSSSSSSSSSS'
+        p responseBody.inspect
+      end # doc.root.elements["GetBGListData"].elements.each do |element|
+    end # targets.each do |target|
+  end
+
+
 #  def provisioningActionURI(method) # not yet used anywhere; instead a workaround is implemented in app/models/provisioning.rb deliver (look for # workaround for the fact that List commands need to be sent to "http://192.168.113.104:80/show") ...
 #  
 #    if name.nil?
@@ -112,48 +180,6 @@ class Customer < Provisioningobject #< ActiveRecord::Base
 #    end
 #  end
 
-# TODO: remove after successful test  
-# def provisionOld(inputBody, async=true)
-#
-#    @customer = Customer.find(id)
-#    # e.g. inputBody = "action = Add Customer, customerName=#{name}" 
-#    
-#    unless @customer.target_id.nil?
-#      @target = Target.find(@customer.target_id)
-#      actionAppend = @target.configuration.gsub(/\n/, ', ')
-#      actionAppend = actionAppend.gsub(/\r/, '')
-#    end
-#    
-#    # recursive deletion of sites (skipped in test mode):
-#    if inputBody.include?("Delete") && !inputBody.include?("testMode")
-#      @sites = Site.where(customer: id)
-#      @sites.each do |site|
-#        inputBodySite = "action=Delete Site, customerName=#{@customer.name}, SiteName=#{site.name}"
-#        inputBodySite = inputBodySite + ', ' + actionAppend unless actionAppend.nil?
-#        site.provision(inputBodySite, async)
-#      end 
-#    end
-#    
-#    inputBody = inputBody + ', ' + actionAppend unless actionAppend.nil?
-#
-#    @provisioning = Provisioning.new(action: inputBody, customer: @customer)
-#    
-#    if @provisioning.save
-#       #@provisioning.createdelayedjob
-#       #@provisioning.deliver
-#       if async == true
-#         @provisioning.deliverasynchronously
-#       else
-#         @provisioning.deliver
-#       end
-#       # success
-#       #return 0
-#    else
-#      @provisioning.errors.full_messages.each do |message|
-#        abort 'provisioning error: ' + message.to_s
-#      end
-#    end 
-#  end # def
   
     # see http://rails-bestpractices.com/posts/708-clever-enums-in-rails
     LANGUAGES = [LANGUAGE_ENGLISH_US = 'englishUS', LANGUAGE_ENGLISH_GB = 'englishGB', LANGUAGE_GERMAN = 'german'] # spanish, frensh, italian, portuguesePT, portugueseBR, dutch, russian, turkish
diff --git a/app/models/provisioning.rb b/app/models/provisioning.rb
index f6c0622..40a70a8 100644
--- a/app/models/provisioning.rb
+++ b/app/models/provisioning.rb
@@ -231,6 +231,11 @@ class Provisioning < ActiveRecord::Base
       p 'returnvalue = ' + returnvalue.to_s
       p '------------------resulttext------------------'
 
+#	  targetobjects.each do |targetobject|
+#            p "#{targetobject.inspect} <---------------------------------"  unless targetobject.nil?
+#            #break unless targetobject.nil?
+#          end unless thisaction == 'reading'
+
       return resulttext if returnvalue == 9 && thisaction == 'reading'
       update_attribute(:status, resulttext) unless thisaction == 'reading'
       return returnvalue
diff --git a/app/models/provisioningobject.rb b/app/models/provisioningobject.rb
index b6e8326..e61036a 100644
--- a/app/models/provisioningobject.rb
+++ b/app/models/provisioningobject.rb
@@ -110,6 +110,136 @@ class Provisioningobject < ActiveRecord::Base
       dummyChild.destroy
     end
   end
+  
+  def self.readOld(mytarget)
+    self.provision(:read, false, self, mytarget)
+  end
+
+  def self.read(mytarget)
+    methodNoun = "reading"
+    # set body to be sent to the ProvisioningEngine target: e.g. inputBody = "action = Add Customer, customerName=#{name}"
+    header = self.provisioningAction(:read)
+		#abort inputBody.inspect
+    return false if header.nil?  # no provisioningAction defined for this type
+
+		#abort provisioningobject.inspect
+    unless mytarget.nil?
+      headerAppend = mytarget.configuration.gsub(/\r/, '')
+      headerAppend = headerAppend.gsub(/^[\s]*\n/,'') # ignore empty lines
+      headerAppend = headerAppend.gsub(/\n/, ', ')
+      headerAppend = headerAppend.gsub(/,[\s]*\Z/, '')# remove trailing commas
+    end
+    
+    header = header + ', ' + headerAppend unless headerAppend.nil?
+    provisioning = Provisioning.new(action: header)
+    object_sym = self.class.to_s.downcase.to_sym
+
+    returnvalue = provisioning.deliver
+  end
+
+  def self.provision(method, async=true, provisioningobject=self, mytarget=nil)
+    # if called as Provisioningobject.provision, then provisioningob
+
+
+#abort mytarget.inspect unless mytarget.nil?
+#abort provisioningobject.inspect if provisioningobject == self
+
+    #@provisioningobject = provisioningobject unless provisioningobject == self
+    #@provisioningobject = nil if provisioningobject == self
+
+    #abort "class method provision() not supported (yet) for class = #{provisioningobject.class.name}" if provisioningobject == self
+    #provisioningobject = nil if provisioningobject == self
+
+    # update the status of the object; throws an exception, if the object cannot be saved.
+		#p "#{provisioningobject.inspect} ************************************************"
+		#p "#{self.inspect} ************************************************"
+    case method
+      when :create
+        abort "unsupported method=#{method} for provisioningobject=#{provisioningobject.inspect}" if provisioningobject == self
+        methodNoun = "provisioning"
+        #return false if activeJob?
+        #return false if provisioned?
+      when :destroy
+        abort "unsupported method=#{method} for provisioningobject=#{provisioningobject}" if provisioningobject == self
+        methodNoun = "de-provisioning"
+        #return false if activeJob?
+        #return false if !provisioned?
+      when :read
+        methodNoun = "reading"
+      else
+        abort "provision(method=#{method}, async=#{async}): Unknown method"
+    end
+
+    # set body to be sent to the ProvisioningEngine target: e.g. inputBody = "action = Add Customer, customerName=#{name}" 
+    inputBody = provisioningobject.provisioningAction(method)
+#abort inputBody.inspect
+    return false if inputBody.nil?  # no provisioningAction defined for this type
+    
+#abort provisioningobject.inspect
+    if provisioningobject == self
+      abort "mytarget must not be nil if provisioningobject = is class Provisioningobject" if mytarget.nil?
+      #mytargets = Target.where('name LIKE ?', 'CSL9DEV%')
+      #mytarget = mytargets.last
+    else
+      mytarget = provisioningobject.target
+    end
+
+    unless mytarget.nil?
+      actionAppend = mytarget.configuration.gsub(/\r/, '')
+      actionAppend = actionAppend.gsub(/^[\s]*\n/,'') # ignore empty lines
+      actionAppend = actionAppend.gsub(/\n/, ', ')
+      actionAppend = actionAppend.gsub(/,[\s]*\Z/, '')# remove trailing commas
+    end
+
+    # this will fail for old objects that do not yet obey to the validations:
+    #update_attributes!(status: "waiting for #{methodNoun}")
+    # it is better to update the status, even if the other validations might fail:
+    provisioningobject.update_attribute(:status, "waiting for #{methodNoun}") unless method == :read
+    
+    # recursive deletion of children (skipped in test mode):
+    if inputBody.include?("Delete ") && !inputBody.include?("testMode") 
+      #@sites = Site.where(customer: id)
+      provisioningobject.children.each do |child|
+        child.provision(:destroy, async)
+      end unless provisioningobject.children.nil?
+    end
+
+    # recursive creation of parents for Add (:create) functions
+    if inputBody.include?("Add ") && !inputBody.include?("testMode")
+       provisioningobject.parent.provision(:create, async) unless provisioningobject.parent.nil?
+    end
+    
+    inputBody = inputBody + ', ' + actionAppend unless actionAppend.nil?
+
+
+    if provisioningobject == self
+      provisioning = Provisioning.new(action: inputBody)
+    else
+      object_sym = provisioningobject.class.to_s.downcase.to_sym
+#p "#{provisioningobject.inspect} <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
+      provisioning = Provisioning.new(action: inputBody, object_sym => provisioningobject) unless provisioningobject == self
+#abort provisioning.inspect
+#p "#{provisioning.inspect} <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
+    end
+
+    if method == :read || provisioning.save
+       if async == true
+         returnvalue = provisioning.deliverasynchronously
+       else
+         returnvalue = provisioning.deliver
+       end
+    else
+      provisioning.errors.full_messages.each do |message|
+        abort 'provisioning error: ' + message.to_s
+      end
+    end 
+    returnvalue
+  end # def provision(method, async=true)
+
+
+  def provisionWorkingButTooComplex(method, async=true) 
+      return Provisioningobject.provision(method, async, self)
+  end
 
   def provision(method, async=true)
 
@@ -117,7 +247,7 @@ class Provisioningobject < ActiveRecord::Base
 
     # update the status of the object; throws an exception, if the object cannot be saved.
     case method
-      when :create
+     when :create
         methodNoun = "provisioning"
         #return false if activeJob?
         #return false if provisioned?
@@ -165,6 +295,8 @@ class Provisioningobject < ActiveRecord::Base
     object_sym = self.class.to_s.downcase.to_sym
     
     @provisioning = Provisioning.new(action: inputBody, object_sym => @provisioningobject)
+#abort @provisioning.inspect
+p "#{@provisioning.inspect} <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
 
     if method == :read || @provisioning.save
        if async == true
diff --git a/lib/http_post_request.rb b/lib/http_post_request.rb
index 753ce4a..eb9b8c1 100644
--- a/lib/http_post_request.rb
+++ b/lib/http_post_request.rb
@@ -1,7 +1,7 @@
 class HttpPostRequest
-  def perform(action, uriString=ENV["PROVISIONINGENGINE_CAMEL_URL"], httpreadtimeout=4*3600, httpopentimeout=6)
+  def perform(headerInput, uriString=ENV["PROVISIONINGENGINE_CAMEL_URL"], httpreadtimeout=4*3600, httpopentimeout=6)
     #
-    # renders action="param1=value1, param2=value2, ..." and sends a HTTP POST request to uriString (default: "http://localhost/CloudWebPortal")
+    # renders headerInput="param1=value1, param2=value2, ..." and sends a HTTP POST request to uriString (default: "http://localhost/CloudWebPortal")
     #
     
     if ENV["WEBPORTAL_SIMULATION_MODE"] == "true"
@@ -15,7 +15,7 @@ class HttpPostRequest
     
     uri = URI.parse(uriString)
     
-    #response = Net::HTTP.post_form(uri, {"testMode" => "testMode", "offlineMode" => "offlineMode", "action" => "Add Customer", "customerName" => @customer.name})
+    #response = Net::HTTP.post_form(uri, {"testMode" => "testMode", "offlineMode" => "offlineMode", "headerInput" => "Add Customer", "customerName" => @customer.name})
     #OV replaced by (since I want to control the timers):
     http = Net::HTTP.new(uri.host, uri.port)
     http.open_timeout = httpopentimeout
@@ -23,28 +23,40 @@ class HttpPostRequest
     request = Net::HTTP::Post.new(uri.request_uri)
     #requestviatyphoeus = Typhoeus::Request.new("http://localhost/CloudWebPortal")
 
-    array = action.split(/,/) #.map(&:strip) #seems to lead sporadically to action=Show Sites to be converted to 'Show Sites' => '' instead of 'action' => 'Show Sites' during Site synchronization
-#    p '+++++++++++++++++++++++++  action.split(/,/) ++++++++++++++++++++++++++++++++'
+    array = headerInput.split(/,/) #.map(&:strip) #seems to lead sporadically to headerInput=Show Sites to be converted to 'Show Sites' => '' instead of 'action' => 'Show Sites' during Site synchronization
+#    p '+++++++++++++++++++++++++  headerInput.split(/,/) ++++++++++++++++++++++++++++++++'
 #    p array.inspect
 #    p array.map(&:strip).inspect
     
     #array = array.map(&:strip)
     
-    postData = {}
+    headerHash = {}
 
-    while array[0]
-      variableValuePairArray = array.shift.split(/=/).map(&:strip)
-#      p '+++++++++++++++++++++++++  variableValuePairArray ++++++++++++++++++++++++++++++++'
-#      p variableValuePairArray.inspect
-      if variableValuePairArray.length.to_s[/^2$/]
-        postData[variableValuePairArray[0]] = variableValuePairArray[1]
-      elsif variableValuePairArray.length.to_s[/^1$/]
-        postData[variableValuePairArray[0]] = ""
-      else
-        abort "action (here: #{action}) must be of the format \"variable1=value1,variable2=value2, ...\""
-      end
-    end
+#abort headerInput.match(/\A([^=\n]+=[^=,\n]+)([,\n]*[^=,\n]+=[^=,\n]+)*\Z/).inspect
+#abort headerInput.is_a?(String).inspect
+#abort (!!headerInput.match(/\A([^=\n]+=[^=,\n]+)([,\n]*[^=,\n]+=[^=,\n]+)*\Z/)).inspect
+    
+    if headerInput.is_a?(Hash)
+      headerHash = headerInput
+    #elsif headerInput.is_a?(String) && headerInput.match(/\A([^=\n]+=[^=,\n]+)([,\n]*[^=,\n]+=[^=,\n]+)*\Z/)
+    elsif headerInput.is_a?(String) && headerInput.match(/\A([^=\n]+=[^=,\n]*)([,\n]*[^=,\n]+=[^=,\n]*)*\Z/)
   
+      while array[0]
+        variableValuePairArray = array.shift.split(/=/).map(&:strip)
+  #      p '+++++++++++++++++++++++++  variableValuePairArray ++++++++++++++++++++++++++++++++'
+  #      p variableValuePairArray.inspect
+        if variableValuePairArray.length.to_s[/^2$/]
+          headerHash[variableValuePairArray[0]] = variableValuePairArray[1]
+        elsif variableValuePairArray.length.to_s[/^1$/]
+          headerHash[variableValuePairArray[0]] = ""
+        else
+          abort "headerInput (here: #{headerInput}) must be of the format \"variable1=value1,variable2=value2, ...\""
+        end
+      end
+    else
+      abort "HttpPostRequest: wrong headerInput (#{headerInput.inspect}) type or format"
+    end # if headerInput.is_a?(Hash)
+
     if simulationMode
       simulationLogString = "(simlulated) "
     else
@@ -53,10 +65,10 @@ class HttpPostRequest
 
 
     p "------------- HttpPostRequest POST Data to #{uriString} #{simulationLogString}-----------------"
-    p postData.inspect
+    p headerHash.inspect
     p '----------------------------------------------------------'
 
-    request.set_form_data(postData)
+    request.set_form_data(headerHash)
 
     # flash does not work in this environment:
     #flash[:notice]  = "Sent HTTP POST Data to #{uriString} #{simulationLogString}"
@@ -85,7 +97,7 @@ class HttpPostRequest
           end
  
       sleep 100.seconds / 1000
-      case postData["action"]
+      case headerHash["action"]
         when /Add Customer/
           if @@customerprovisioned.nil?
             responseBody = "Success: 234     Errors:0     Syntax Errors:0"
@@ -198,7 +210,7 @@ class HttpPostRequest
 <SOAPResult><Result>Success</Result><GetBGListData><BGName>BG_DC</BGName><BGName>Thomas1</BGName><BGName>OllisTestCustomer</BGName><BGName>OllisTestCustomer2</BGName></GetBGListData></SOAPResult>'
           end
         else
-          responseBody = "action not supported in simulation mode: have received #{postData["action"]}"
+          responseBody = "action not supported in simulation mode: have received #{headerHash["action"]}"
       end
     else    
       begin
diff --git a/lib/update_db.rb b/lib/update_db.rb
index fa1569f..032f1c0 100644
--- a/lib/update_db.rb
+++ b/lib/update_db.rb
@@ -25,7 +25,8 @@ class UpdateDB
     end
     
     # only Customer, Site, User are supported:
-    abort "lib/update_db.rb.perform(targetobject): Unsupported class" unless targetobject.is_a?(Customer) || targetobject.is_a?(Site) || targetobject.is_a?(User)
+    abort "lib/update_db.rb.perform(targetobject): Unsupported class" unless targetobject.is_a?(Customer) || targetobject.is_a?(Site) || targetobject.is_a?(User) || targetobject == Customer || targetobject == Site || targetobject == User
+#abort (targetobject == Customer).inspect
     
     if responseBody.nil?
       return "ERROR: UpdateDB: provisioningRequest timeout (#{provisioningRequestTimeout} sec) reached!"
@@ -43,15 +44,16 @@ class UpdateDB
 
     if targetobject.is_a?(Target)
       abort "synchronization of Targets is not supported (yet)"      
-    elsif targetobject.is_a?(Customer)
+    elsif targetobject.is_a?(Customer) || targetobject == Customer
 	#p xml_data.inspect
 	#abort doc.root.elements["GetBGListData"].elements["BGName"].inspect
 		#abort targetobject.inspect
-      if targetobject.name.match(/_sync_dummyCustomer_________________/) #targetobject.id.nil?
+      if targetobject.name.match(/_sync_dummyCustomer_________________/) || targetobject == Customer #targetobject.id.nil? 
         # assume that this is a dummy targetobject that has been created to synchronize all instances from the target system to the DB
         # TODO: create customers that are on the target system and not in the DB
 		#abort doc.root.elements["GetBGListData"].elements.inspect
         doc.root.elements["GetBGListData"].elements.each do |element|
+		#abort element.text.inspect
           # skip special customer (BG) named BG_DC
           next if /\ABG_DC\Z/.match( element.text )
           # skip if the customer exists already in the database:
diff --git a/public/favicon.ico b/public/favicon.ico
index e69de29..941472a 100644
Binary files a/public/favicon.ico and b/public/favicon.ico differ
